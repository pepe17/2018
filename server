using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Domen;
using System.Net;
using System.Net.Sockets; //tip klijent-server aplikacije preko soketa
using System.Runtime.Serialization.Formatters.Binary;
using System.Threading;

namespace Server
{
    public class Server
    {
        Socket soket;
        public static List<Korisnik> listaKorisnika;
        public static List<Rec> listaReci;

        //popuni listu korisnicima

        void popuniKorisnike()
        {
            listaKorisnika = new List<Korisnik>();
            listaKorisnika.Add(new Korisnik() { Username = "pera", Ime = "Pera", Prezime = "Peric" });
            listaKorisnika.Add(new Korisnik() { Username = "mika", Ime = "Mika", Prezime = "Mikic" });
            listaKorisnika.Add(new Korisnik() { Username = "zika", Ime = "Zika", Prezime = "Zikic" });
            //jos dvoje

        }

        //popuni reci

        void popuniReci()
        {
            listaReci = new List<Rec>();

            Korisnik k = new Korisnik() { Username = "SERVER", Ime="Server",Prezime="Server"}; //korisnik koji unosi reci

            Rec r1 = new Rec() { Text = "Konj", Korisnik = k }; //pravimo novu rec
            r1.ListaZnacenja.Add(new Znacenje() { Rec = "Konj", Text = "Horse", Korisnik = k }); //dodajemo znacenja za tu rec
            r1.ListaZnacenja.Add(new Znacenje() { Rec = "Konj", Text = "Equine", Korisnik = k }); //dodajemo znacenja za tu rec
            listaReci.Add(r1); //dodajemo rec u listu

            Rec r2 = new Rec() { Text = "Profesor", Korisnik = k };
            r2.ListaZnacenja.Add(new Znacenje() { Rec = "Profesor", Text = "Professor", Korisnik = k }); 
            r2.ListaZnacenja.Add(new Znacenje() { Rec = "Profesor", Text = "Academic", Korisnik = k }); 
            r2.ListaZnacenja.Add(new Znacenje() { Rec = "Profesor", Text = "Teacher", Korisnik = k }); 
            listaReci.Add(r2);//dodajemo rec u listu


        }

        public Server()
        {
            popuniKorisnike();
            popuniReci();
        }



        public bool pokreniServer()
        {
            try
            {
                soket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                IPEndPoint ep = new IPEndPoint(IPAddress.Any, 20000);
                soket.Bind(ep);

                //osluskuj();

                ThreadStart ts = osluskuj;
                new Thread(ts).Start();

                return true;
            }
            catch (Exception)
            {

                return false;

            }
        }

        public bool zaustaviServer()
        {
            try
            {
                soket.Close();
                return true;
            }
            catch (Exception)
            {

                return false;

            }
        }

        void osluskuj()
        {
            try
            {
                while (true)
                {
                    soket.Listen(8);
                    Socket klijent = soket.Accept();
                    NetworkStream tok = new NetworkStream(klijent);
                    //dodajemo
                    BinaryFormatter formater = new BinaryFormatter();
                    TransferKlasa transfer = formater.Deserialize(tok) as TransferKlasa; //primamo transfer klasu odnosno podatke o korisniku  u komunikaciji je to linija koda sa return formater ser....itd
                    Korisnik k = transfer.Korisnik;
                    transfer.Ulogovan = false; //pretpostavicemo da  korisnik nije ulogovan

                    //provera da li postoji u listi
                    foreach(Korisnik ko in listaKorisnika)
                    {
                        if(ko.Username==k.Username)
                        {
                            //treba da zapamtimo tog korisnika
                            transfer.Korisnik = ko; // od objekta k imamo samo username, a ko ima sve
                            transfer.Ulogovan = true;
                        }
                    }

                    if(!transfer.Ulogovan)
                    {
                        transfer.Poruka = "Nema te na spisku!";
                    }


                    formater.Serialize(tok, transfer); //poslacemo odgovor korisniku da li je ulogovan ili ne i poruku - u komunikaciji je to linija koda sa return formater des....itd

                    if(transfer.Ulogovan) new NitKlijenta(tok); // ukoliko je ulogovan pravi se nova nit



                }

            }
            catch (Exception)
            {
                //sklanjamo throw; da nam ne baci exception ukoliko nesto krene naopako, tj ako ugasimo server

            }

        }
    }
}
